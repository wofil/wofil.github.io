{"version":3,"sources":["logo.svg","Letter/Letter.js","Grid/Grid.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","__webpack_require__","p","Letter","_ref","letter","dragged","id","setCurrentDrag","stopped","classes","_useState","clicked","useState","_useState2","_slicedToArray","beingDragged","setBeingDragged","renderLetter","l","React","createElement","Fragment","className","Draggable","onStart","e","console","log","target","style","zIndex","onStop","Grid","answer","initial_state","grid","setGrid","_useState3","_useState4","setClasses","mapping","0,1","0,3","2,1","2,3","4,1","4,3","1,0","3,0","1,2","3,2","1,4","3,4","0,0","4,0","0,4","4,4","0,2","2,0","4,2","2,4","2,2","_useState5","_useState6","currentDrag","useEffect","updateClasses","calculateIoU","rect1","rect2","intersectionLeft","Math","max","left","intersectionTop","top","intersectionRight","min","right","intersectionBottom","bottom","intersectionArea","source_element","srcElement","elements","document","getElementsByClassName","getBoundingClientRect","max_iou","max_iou_ind","i","length","element","iou","sx","parseInt","split","sy","tx","ty","newGrid","map","row","_toConsumableArray","a","newClasses","j","greens","yellows","current_id","current_letter","letters","letter_map","f","original_counts","k","x","y","original_letter","current_greens","Object","keys","cg","cl","current_yellows","cy","App","gameMode","setGameMode","MySwal","withReactContent","Swal","getTodayRandom","random","create","now","Date","start","getFullYear","diff","getTimezoneOffset","floor","dayOfYear","setTimeout","fire","title","position","html","display","confirmButtonText","cancelButtonText","background","cancelButtonColor","showConfirmButton","showCancelButton","allowOutsideClick","allowEscapeKey","then","value","isConfirmed","isDismissed","answers","reportWebVitals","onPerfEntry","Function","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,8OCIzB,SAASC,EAAMC,GAAoE,IAAjEC,EAAMD,EAANC,OAAQC,EAAOF,EAAPE,QAAyBC,GAAFH,EAAdI,eAAkBJ,EAAFG,IAAIE,EAAOL,EAAPK,QAASC,EAAON,EAAPM,QAAgBC,GAAAP,EAAPQ,QAE5CC,oBAAS,IAAMC,EAAAC,YAAAJ,EAAA,GAAhDK,EAAYF,EAAA,GAAEG,EAAeH,EAAA,GAE9BI,EAAe,SAACC,GAClB,MAAQ,KAALA,EAAiB,KACZ,KAALA,EAAiB,UAEbA,GAoBX,OACIC,IAAAC,cAAAD,IAAAE,SAAA,KACMhB,GAAqB,KAAVD,EAOTe,IAAAC,cAAA,QAAOd,GAAIA,EAAIgB,UAAW,cAA0B,KAAVlB,EAAgB,MAAM,KAAiB,KAATA,GAAkBK,EAAQH,EAAG,IAAIA,EAAG,IAAM,KACnG,KAAVF,EAAgBa,EAAab,GAAU,IAP5Ce,IAAAC,cAACG,IAAS,CAACC,QApBH,SAACC,GACjBC,QAAQC,IAAIF,EAAEG,OAAOC,MAAMC,QAC3BL,EAAEG,OAAOC,MAAMC,OAAS,IACxBd,GAAgB,IAiByBe,OAX9B,SAACN,GACZjB,EAAQiB,GACRT,GAAgB,KAUJG,IAAAC,cAAA,QAAOd,GAAIA,EAAIgB,UAAW,cAAeP,EAAe,WAAW,IAAON,EAAQH,EAAG,IAAIA,EAAG,KACvFW,EAAab,MCjCvB,SAAS4B,EAAI7B,GAA2B,IAAxB8B,EAAM9B,EAAN8B,OAAQC,EAAa/B,EAAb+B,cAENxB,EACLE,mBAASsB,GAAcrB,EAAAC,YAAAJ,EAAA,GAAxCyB,EAAItB,EAAA,GAAEuB,EAAOvB,EAAA,GAAAwB,EACUzB,mBAAS,CACnC,CAAC,IAAK,IAAK,IAAK,IAAK,KACrB,CAAC,IAAK,IAAK,IAAK,IAAK,KACrB,CAAC,IAAK,IAAK,IAAK,IAAK,KACrB,CAAC,IAAK,IAAK,IAAK,IAAK,KACrB,CAAC,IAAK,IAAK,IAAK,IAAK,OACvB0B,EAAAxB,YAAAuB,EAAA,GANK5B,EAAO6B,EAAA,GAAEC,EAAUD,EAAA,GAiBpBE,EAAU,CAEZC,MAAM,CAAC,CAAC,EAAE,GAAI,CAAC,EAAE,GAAI,CAAC,EAAE,GAAI,CAAC,EAAE,GAAI,CAAC,EAAE,IACtCC,MAAM,CAAC,CAAC,EAAE,GAAI,CAAC,EAAE,GAAI,CAAC,EAAE,GAAI,CAAC,EAAE,GAAI,CAAC,EAAE,IAEtCC,MAAM,CAAC,CAAC,EAAE,GAAI,CAAC,EAAE,GAAI,CAAC,EAAE,GAAI,CAAC,EAAE,GAAI,CAAC,EAAE,IACtCC,MAAM,CAAC,CAAC,EAAE,GAAI,CAAC,EAAE,GAAI,CAAC,EAAE,GAAI,CAAC,EAAE,GAAI,CAAC,EAAE,IAEtCC,MAAM,CAAC,CAAC,EAAE,GAAI,CAAC,EAAE,GAAI,CAAC,EAAE,GAAI,CAAC,EAAE,GAAI,CAAC,EAAE,IACtCC,MAAM,CAAC,CAAC,EAAE,GAAI,CAAC,EAAE,GAAI,CAAC,EAAE,GAAI,CAAC,EAAE,GAAI,CAAC,EAAE,IAGtCC,MAAM,CAAC,CAAC,EAAE,GAAI,CAAC,EAAE,GAAI,CAAC,EAAE,GAAI,CAAC,EAAE,GAAI,CAAC,EAAE,IACtCC,MAAM,CAAC,CAAC,EAAE,GAAI,CAAC,EAAE,GAAI,CAAC,EAAE,GAAI,CAAC,EAAE,GAAI,CAAC,EAAE,IAEtCC,MAAM,CAAC,CAAC,EAAE,GAAI,CAAC,EAAE,GAAI,CAAC,EAAE,GAAI,CAAC,EAAE,GAAI,CAAC,EAAE,IACtCC,MAAM,CAAC,CAAC,EAAE,GAAI,CAAC,EAAE,GAAI,CAAC,EAAE,GAAI,CAAC,EAAE,GAAI,CAAC,EAAE,IAEtCC,MAAM,CAAC,CAAC,EAAE,GAAI,CAAC,EAAE,GAAI,CAAC,EAAE,GAAI,CAAC,EAAE,GAAI,CAAC,EAAE,IACtCC,MAAM,CAAC,CAAC,EAAE,GAAI,CAAC,EAAE,GAAI,CAAC,EAAE,GAAI,CAAC,EAAE,GAAI,CAAC,EAAE,IAGtCC,MAAM,CAAC,CAAC,EAAE,GAAI,CAAC,EAAE,GAAI,CAAC,EAAE,GAAI,CAAC,EAAE,GAAI,CAAC,EAAE,GAAI,CAAC,EAAE,GAAI,CAAC,EAAE,GAAI,CAAC,EAAE,GAAI,CAAC,EAAE,IAGlEC,MAAM,CAAC,CAAC,EAAE,GA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","file":"static/js/main.88c6eee8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.06e73328.svg\";","import React, { useEffect, useState } from \"react\";\r\nimport Draggable from \"react-draggable\";\r\nimport LetterCss from './Letter.css'\r\n\r\nexport default function Letter ({letter, dragged, setCurrentDrag, id, stopped, classes, clicked}) { \r\n\r\n    const [beingDragged, setBeingDragged] = useState(false)\r\n\r\n    const renderLetter = (l) => {\r\n        if(l == '?') return 'ie'\r\n        if(l == '/') return 'għ'\r\n\r\n        return l\r\n    }\r\n\r\n    const handleStart = (e) => {\r\n        console.log(e.target.style.zIndex)\r\n        e.target.style.zIndex = 1000\r\n        setBeingDragged(true)\r\n        \r\n        // Handle the drag over event here\r\n    }\r\n\r\n\r\n    const stoppa = (e) => {\r\n        stopped(e)\r\n        setBeingDragged(false)\r\n\r\n    }\r\n    \r\n    \r\n\r\n    return (\r\n        <>  \r\n            {!dragged && letter != '.' ?\r\n                <Draggable onStart={handleStart} onStop={stoppa}>\r\n                    <span  id={id} className={'grid_cell '+ (beingDragged ? 'big_mode':'') + (classes[id[0]][id[1]])}>\r\n                        {renderLetter(letter)}\r\n                    </span>\r\n                </Draggable>\r\n            :\r\n                <span  id={id} className={'grid_cell ' + (letter == '.' ? 'dot':'')  + (letter !='.' ? + (classes[id[0]][id[1]]) :'')}>\r\n                    {letter != '.' ? renderLetter(letter) : ''}\r\n                </span>\r\n            }\r\n        </>\r\n    )\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport GridCss from './GridCss.css'\r\nimport Draggable from \"react-draggable\";\r\nimport Letter from '../Letter/Letter'\r\nexport default function Grid ({answer, initial_state}) { \r\n    const guessLimit = 15\r\n    const current_state = answer;\r\n    const [grid, setGrid] = useState(initial_state)\r\n    const [classes, setClasses] = useState([\r\n        ['.', '.', '.', '.', '.'],\r\n        ['.', '.', '.', '.', '.'],\r\n        ['.', '.', '.', '.', '.'],\r\n        ['.', '.', '.', '.', '.'],\r\n        ['.', '.', '.', '.', '.']\r\n    ])\r\n\r\n    const reducer = {\r\n        '0,1':'0,3',\r\n        '2,3':'2,1',\r\n        '4,3':'4,1',\r\n        '3,0':'1,0',\r\n        '3,2':'1,2',\r\n        '3,4':'1,4'\r\n    }\r\n\r\n    const mapping = {\r\n        // easy in horizontal\r\n        '0,1':[[0,0], [0,1], [0,2], [0,3], [0,4]],\r\n        '0,3':[[0,0], [0,1], [0,2], [0,3], [0,4]],\r\n\r\n        '2,1':[[2,0], [2,1], [2,2], [2,3], [2,4]],\r\n        '2,3':[[2,0], [2,1], [2,2], [2,3], [2,4]],\r\n\r\n        '4,1':[[4,0], [4,1], [4,2], [4,3], [4,4]],\r\n        '4,3':[[4,0], [4,1], [4,2], [4,3], [4,4]],\r\n\r\n        // easy in vertical\r\n        '1,0':[[0,0], [1,0], [2,0], [3,0], [4,0]],\r\n        '3,0':[[0,0], [1,0], [2,0], [3,0], [4,0]],\r\n\r\n        '1,2':[[0,2], [1,2], [2,2], [3,2], [4,2]],\r\n        '3,2':[[0,2], [1,2], [2,2], [3,2], [4,2]],\r\n\r\n        '1,4':[[0,4], [1,4], [2,4], [3,4], [4,4]],\r\n        '3,4':[[0,4], [1,4], [2,4], [3,4], [4,4]],\r\n\r\n        // top left corner\r\n        '0,0':[[0,0], [0,1], [0,2], [0,3], [0,4], [1,0], [2,0], [3,0], [4,0] ],\r\n\r\n        // bottom left corner\r\n        '4,0':[[4,0], [4,1], [4,2], [4,3], [4,4], [0,0], [1,0], [2,0], [3,0] ],\r\n\r\n        // top right corner\r\n        '0,4':[[0,0], [0,1], [0,2], [0,3], [0,4], [1,4], [2,4], [3,4], [4,4]],\r\n\r\n        // bottom right corner\r\n        '4,4': [[4,0], [4,1], [4,2], [4,3], [4,4], [0,4], [1,4], [2,4], [3,4]],\r\n\r\n        // top T\r\n        '0,2': [[0,0], [0,1], [0,2], [0,3], [0,4], [1,2], [2,2], [3,2], [4,2]],\r\n\r\n        // left T\r\n        '2,0': [[0,0], [1,0], [2,0], [3,0], [4,0], [2,1], [2,2], [2,3], [2,4] ],\r\n\r\n        // bottom T\r\n        '4,2': [[4,0], [4,1], [4,2], [4,3], [4,4], [0,2], [1,2], [2,2], [3,2]],\r\n\r\n        // right T\r\n        '2,4': [[2,0], [2,1], [2,2], [2,3], [2,4], [0,4], [1,4], [3,4], [4,4]],\r\n\r\n        // middle +\r\n        '2,2': [[2,0], [2,1], [2,2], [2,3], [2,4], [0,2], [1,2], [3,2], [4,2]]\r\n    }\r\n\r\n    const [currentDrag, setCurrentDrag] = useState(false)\r\n\r\n\r\n    useEffect( () =>{\r\n        updateClasses()\r\n    }, [])\r\n\r\n    useEffect(()=>{\r\n        updateClasses()\r\n    }, [grid])\r\n\r\n    useEffect( () =>{\r\n        if(currentDrag)\r\n            setCurrentDrag(false)\r\n    }, [currentDrag])\r\n\r\n    const entered = (id) => {\r\n        id.preventDefault()\r\n    }\r\n\r\n    const calculateIoU = (rect1, rect2) => {\r\n        // Calculate the coordinates of the intersection rectangle\r\n        const intersectionLeft = Math.max(rect1.left, rect2.left);\r\n        const intersectionTop = Math.max(rect1.top, rect2.top);\r\n        const intersectionRight = Math.min(rect1.right, rect2.right);\r\n        const intersectionBottom = Math.min(rect1.bottom, rect2.bottom);\r\n      \r\n        // Calculate the dimensions of the intersection rectangle\r\n        const intersectionWidth = Math.max(0, intersectionRight - intersectionLeft);\r\n        const intersectionHeight = Math.max(0, intersectionBottom - intersectionTop);\r\n      \r\n        // Calculate the area of intersection\r\n        const intersectionArea = intersectionWidth * intersectionHeight;\r\n      \r\n        // Calculate the area of the union\r\n        const rect1Area = (rect1.right - rect1.left) * (rect1.bottom - rect1.top);\r\n        const rect2Area = (rect2.right - rect2.left) * (rect2.bottom - rect2.top);\r\n        const unionArea = rect1Area + rect2Area - intersectionArea;\r\n      \r\n        // Calculate the IoU\r\n        const iou = intersectionArea / unionArea;\r\n      \r\n        return iou;\r\n    }      \r\n\r\n    const stopped = (e) => {\r\n        \r\n        let source_element = e.srcElement;\r\n        source_element.style.zIndex = 10\r\n\r\n\r\n        let elements = document.getElementsByClassName('grid_cell')\r\n        const rect1 = source_element.getBoundingClientRect();\r\n\r\n        let max_iou = 0;\r\n        let max_iou_ind = -1;\r\n        \r\n        for(let i = 0; i < elements.length; i ++){\r\n            let element = elements[i]\r\n\r\n            if (element.id == source_element.id){\r\n                continue\r\n            }\r\n\r\n            let rect2 = element.getBoundingClientRect();\r\n            let iou = calculateIoU(rect1, rect2)\r\n            if(iou == 0) {\r\n                continue\r\n            }else{\r\n                if(iou > max_iou){\r\n                    max_iou = iou\r\n                    max_iou_ind = element.id\r\n                }\r\n            }\r\n        }\r\n\r\n        setCurrentDrag(true)\r\n\r\n        let sx = parseInt( source_element.id.split(',')[0])\r\n        let sy = parseInt( source_element.id.split(',')[1])\r\n\r\n        if(max_iou_ind == -1){\r\n            return\r\n        }\r\n\r\n        let tx = parseInt( max_iou_ind.split(',')[0])\r\n        let ty = parseInt( max_iou_ind.split(',')[1])\r\n\r\n        if(grid[tx][ty] == '.'){\r\n            return\r\n        }\r\n\r\n        setGrid((grid) => {\r\n\r\n            const newGrid = grid.map((row) => [...row]); \r\n\r\n            let a = newGrid[sx][sy]\r\n            newGrid[sx][sy] = newGrid[tx][ty]\r\n            newGrid[tx][ty] = a\r\n\r\n            return newGrid\r\n        })\r\n\r\n       \r\n    }\r\n\r\n    const updateClasses = () =>{\r\n\r\n        //console.log('answer', answer)\r\n\r\n        const newClasses = classes.map((row) => [...row]); \r\n\r\n        // reset class colours\r\n        for(let i = 0; i < grid.length; i ++){\r\n            for(let j = 0; j < grid[0].length; j ++){\r\n                newClasses[i][j] = 'gray'\r\n            }\r\n        }\r\n\r\n        let greens = {}\r\n        let yellows = {}\r\n\r\n        // set greens\r\n        for(let i = 0; i < grid.length; i ++){\r\n            for(let j = 0; j < grid[0].length; j ++){\r\n\r\n                if(answer[i][j] == grid[i][j]){\r\n                    newClasses[i][j] = 'green'\r\n                    greens[i+','+j] = 1\r\n                }\r\n            }\r\n        }\r\n\r\n        for(let i = 0; i < grid.length; i ++){\r\n            for(let j = 0; j < grid[0].length; j ++){\r\n                let current_id = i+','+j\r\n                let current_letter = grid[i][j]\r\n\r\n                if(current_id in greens){\r\n                    continue\r\n                }\r\n                if(current_id in mapping){\r\n                    let letters = mapping[current_id]\r\n                    //console.log('letters', letters)\r\n                    let letter_map = {\r\n\r\n                    }\r\n\r\n                    for(let f = 0; f < letters.length; f ++){\r\n                        let id = letters[f][0]+','+letters[f][1]\r\n                        letter_map[id] = 1\r\n                    }\r\n\r\n                    let original_counts = {}\r\n                    //console.log('yellows', yellows)\r\n                    //console.log('letter_map', letter_map)\r\n\r\n                    for(let k = 0; k < letters.length; k ++){\r\n                        let x = letters[k][0]\r\n                        let y = letters[k][1]\r\n\r\n                        let original_letter = answer[x][y]\r\n                        let id = x+','+y\r\n\r\n\r\n\r\n                        //console.log(current_id, 'adding ', original_letter)\r\n\r\n                        if(original_letter in original_counts){\r\n                            original_counts[original_letter] += 1\r\n                        }else{\r\n                            original_counts[original_letter] = 1\r\n                        }\r\n                    }\r\n\r\n                    let current_greens = Object.keys(greens)\r\n\r\n                    for(let cg = 0; cg < current_greens.length; cg ++){\r\n                        let id = current_greens[cg]\r\n\r\n                        let x = parseInt(id[0])\r\n                        let y = parseInt(id[2])\r\n\r\n                        let cl = grid[x][y]\r\n\r\n                        //console.log(current_id, 'considering green removing', cl, 'at', x,y)\r\n                        //console.log(original_counts, letter_map)\r\n                        if(cl in original_counts && id in letter_map){\r\n                        //console.log(current_id, ' green removing', cl, 'at', x,y)\r\n                        original_counts[cl] -= 1\r\n                        }\r\n\r\n                    }\r\n\r\n                    let current_yellows = Object.keys(yellows)\r\n                    for(let cy = 0; cy < current_yellows.length; cy ++){\r\n                        let id = current_yellows[cy]\r\n\r\n                        let x = parseInt(id[0])\r\n                        let y = parseInt(id[2])\r\n\r\n                        let cl = grid[x][y]\r\n\r\n                        //console.log(current_id, 'considering removing', cl, 'at', x,y)\r\n                        if(cl in original_counts && id in letter_map){\r\n                            original_counts[cl] -= 1\r\n                        }\r\n\r\n                    }\r\n\r\n                    //console.log(current_id, 'original_counts', original_counts)\r\n\r\n                    if(original_counts[current_letter] > 0){\r\n                        newClasses[i][j] = 'yellow'\r\n                        //console.log(current_id, 'set to yellow  ')\r\n                        yellows[current_id] = 1\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        setClasses(newClasses)\r\n    }\r\n\r\n    return (\r\n        <>  \r\n        <div className=\"all_holder\">\r\n            <div className='grid_holder'>\r\n                {\r\n                    grid.map ((row, i) => {\r\n                        return <span className='grid_row'>\r\n                            {\r\n                                row.map((letter, j) => \r\n                                    <Letter letter={letter} dragged={currentDrag} id={[i,j]} setCurrentDrag={setCurrentDrag} stopped={stopped} classes={classes}/>\r\n                                )\r\n                            }\r\n                        </span>\r\n                    })\r\n                }\r\n            </div>\r\n        </div>\r\n            \r\n        </>\r\n    )\r\n}","import logo from './logo.svg';\nimport './App.css';\nimport Grid from './Grid/Grid'\nimport random from \"random-seed\"\nimport withReactContent from 'sweetalert2-react-content'\nimport React, { Component }  from 'react';\nimport '@sweetalert2/theme-dark/dark.css'\n\nimport Swal from 'sweetalert2/dist/sweetalert2.js'\n\nimport answers from './answers.json'\nimport { useEffect, useState } from 'react';\n\n\nfunction App() {\n  \n  const [gameMode, setGameMode] = useState(-1)\n  const MySwal = withReactContent(Swal)\n\n\n  let dayOfYear = function(){\n    var now = new Date();\n    var start = new Date(now.getFullYear(), 0, 0);\n    var diff = (now - start) + ((start.getTimezoneOffset() - now.getTimezoneOffset()) * 60 * 1000);\n    var oneDay = 1000 * 60 * 60 * 24;\n    return Math.floor(diff / oneDay);\n  }\n\n  let getTodayRandom = function(){\n    \n    return random.create(dayOfYear() + (new Date().getFullYear())).random()\n  }\n\n  useEffect( ()=>{\n      setTimeout( ()=> {\n        MySwal.fire({\n          title: <p>Merhba ghal Wofil.</p>,\n          position:'top',\n          html: <div style={{    display: 'flex'}}>\n            Instructions... taparsi\n          </div>,\n          confirmButtonText:'Ta illum',\n          cancelButtonText:'Li tkun',\n          background:'black',\n          cancelButtonColor:\"red\",\n          showConfirmButton: true,\n          showCancelButton:true,\n          allowOutsideClick:false,\n          allowEscapeKey:false\n        }).then((value) =>{\n  \n          if(value.isConfirmed){\n            setGameMode(Math.floor(getTodayRandom() * 100))\n            \n          }else if(value.isDismissed){\n            setGameMode(Math.floor(Math.random() * 100))\n          }\n  \n        })\n      }, 500)\n\n      \n  }, [])\n\n\n\n\n  return (\n    <div className=\"App\">\n      {gameMode == -1 ?\n      '' :\n      <Grid answer={answers[gameMode][0]} initial_state={answers[gameMode][1]}></Grid>\n      }\n      </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}